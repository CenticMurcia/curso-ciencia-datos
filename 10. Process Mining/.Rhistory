10Â²
20^2
10^2
log(120)
log(100)
log10(120)
10^3
1000/60
15*60
log10(900)
10^4
10000(3600)
10^4 / 3600
10^5 / 3600
install.packages("sf")
install.packages("mapview")
devtools::install_github("16EAGLE/getSpatialData")
library(getSpatialData)
library(getSpatialData)
library(raster)
library(sf)
library(sp)
## Define an AOI (either matrix, sf or sp object)
data("aoi_data") # example aoi
aoi <- aoi_data[[3]] # AOI as matrix object, or better:
aoi <- aoi_data[[2]] # AOI as sp object, or:
aoi <- aoi_data[[1]] # AOI as sf object
## set AOI for this session
set_aoi(aoi)
view_aoi() #view AOI in viewer, which will look like this:
#instead of using an existing AOI, you can simply draw one:
set_aoi() #call set_aoi() without argument, which opens a mapedit editor:
view_aoi()
## set login credentials and archive directory
login_CopHub(username = "jmbolarin") #asks you for password
## Use getSentinel_query to search for data (using the session AOI)
records <- getSentinel_query(time_range = c("2017-08-01", "2017-08-30"),
platform = "Sentinel-2") #or "Sentinel-1" or "Sentinel-3"
## Filter the records
colnames(records) #see all available filter attributes
unique(records$processinglevel) #use one of the, e.g. to see available processing levels
records_filtered <- records[which(records$processinglevel == "Level-1C"),] #filter by Level
records_filtered <- records_filtered[as.numeric(records_filtered$cloudcoverpercentage) <= 30, ] #filter by clouds
## View records table
View(records)
View(records_filtered)
## Preview a single record on a mapview map with session AOI
getSentinel_preview(record = records_filtered[9,])
## Preview a single record on a mapview map with session AOI
getSentinel_preview(record = records_filtered[8,])
## Preview a single record on a mapview map with session AOI
getSentinel_preview(record = records_filtered[1,])
## Preview a single record on a mapview map with session AOI
getSentinel_preview(record = records_filtered[2,])
## Preview a single record on a mapview map with session AOI
getSentinel_preview(record = records_filtered[3,])
## Preview a single record on a mapview map without session AOI
getSentinel_preview(record = records_filtered[3,], show_aoi = FALSE)
## Preview a single record as RGB plot
getSentinel_preview(record = records_filtered[3,], on_map = FALSE)
## Finally, define an output format and make them ready-to-use
datasets_prep <- prepSentinel(datasets, format = "tiff")
## Download some datasets to your archive directory
datasets <- getSentinel_data(records = records_filtered[c(3,4,5), ])
## Download some datasets to your archive directory
datasets <- getSentinel_data(records = records_filtered[c(3,4,5), ])
dir_out
dir_out = "/home/centic/Data/24 - Sentinel GIS/GetSpatialData/Data"
## Download some datasets to your archive directory
datasets <- getSentinel_data(records = records_filtered[c(3,4,5), ])
## Download some datasets to your archive directory
datasets <- getSentinel_data(records = records_filtered[c(3,4), ])
## Download some datasets to your archive directory
datasets <- getSentinel_data(records = records_filtered[c(3), ])
## Download some datasets to your archive directory
datasets <- getSentinel_data(records = records_filtered[c(3,4,5), dir_out])
## We could re-generate the dataset by the following R code
seed <- as.double(1)
RANDU <- function() {
seed <<- ((2^16 + 3) * seed) %% (2^31)
seed/(2^31)
}
for(i in 1:400) {
U <- c(RANDU(), RANDU(), RANDU(), RANDU(), RANDU())
print(round(U[1:3], 6))
}
shiny::runApp('Descargas/Cavas/Apps/EMKLAS')
#################################################################################
cat("\014")
rm(list = ls())
setwd(paste('/home/centic/Data/curso-ciencia-datos/09. Process Mining', sep=''))
library(bupaR)
eventlog <- patients
sample <- eventlog %>%
arrange(patient, time, handling)
sample %>% head(n = 50) %>% print.data.frame()
write.csv(sample, file='eventlog.txt')
summary(eventlog)
activities(eventlog)
cases(eventlog)
resources(eventlog)
traces(eventlog)
mapping(eventlog)
activity_id(eventlog)
activity_instance_id(eventlog)
case_id(eventlog)
lifecycle_id(eventlog)
resource_id(eventlog)
timestamp(eventlog)
n_activities(eventlog)
n_activity_instances(eventlog)
n_cases(eventlog)
n_events(eventlog)
n_resources(eventlog)
n_traces(eventlog)
eventlog %>% activity_frequency(level = 'activity') %>% plot()
eventlog %>% trace_length(level = 'trace') %>% plot()
eventlog %>% group_by_case() %>% trace_explorer(cov = 1, type = 'frequent')
eventlog %>% dotted_chart(x='absolute', sort='start', color='handling')
eventlog %>% dotted_chart(x='relative', sort='duration', units='days',
color='handling')
eventlog %>% dotted_chart(x='absolute', sort='start', color='employee')
eventlog %>% dotted_chart(x='relative', sort='duration', units='days',
color='employee')
eventlog %>% process_map(type=frequency('absolute'))
eventlog %>% process_map(type=frequency('relative'))
eventlog %>% process_map(performance(mean, 'hours'))
eventlog %>% processing_time('activity') %>% plot
eventlog %>% throughput_time('log') %>% plot
eventlog %>% resource_involvement('resource') %>% plot
eventlog %>% precedence_matrix(type = 'absolute') %>% plot
eventlog %>% precedence_matrix(type = 'relative') %>% plot
eventlog %>% resource_map()
